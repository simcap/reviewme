#!/usr/bin/env ruby
require 'optparse'

# Getting main git info
current_branch = `git symbolic-ref HEAD`.chomp.split('/').last
reviewme_server_url = `git config reviewme.server.url`.chomp
publisher_email = `git config user.email`.chomp
publisher_name = `git config user.name`.chomp

# Checking correct local configuration
if publisher_email.strip.empty?
  puts <<-INSTR
You need to configure a user email with:
$ git config --global user.email myusername@email.com
INSTR
  exit
end

if reviewme_server_url.strip.empty?
  puts <<-INSTR
You need to configure the url for the reviewme server with:
$ git config --global reviewme.server.url http://reviewme.server.com/reviews
INSTR
  exit
end


# Defining options parsing
options = {}

examples = <<EX
    # Publish the last commit
    $ git reviewme

    # Publish the last commit and a subject for the review
    $ git reviewme -s"Fixing production bug"

    # Publish the 3 last commits from natural log ordering
    $ git reviewme -n3

    # Publish specific commits using short hashes
    $ git reviewme 0ecbac9 10dcc09 2a9a2c8  

    # Publish specific commits with a subject for the review
    $ git reviewme 0ecbac9 10dcc09 2a9a2c8 -s"Patching production"
EX

optparse = OptionParser.new do |opts|
  opts.banner = "USAGE\n     git reviewme [-n] [-s] [<commit hashes>...]"
  opts.separator "\nOPTIONS\n"
  
  options[:commits_number] = 1
  opts.on( '-n', '--number NUMBER', Integer, 'Number of the last commits that will be included in the published review' ) do |number|
    options[:commits_number] = number
  end
  
  opts.on( '-s', '--subject SUBJECT', 'Subject of the published review' ) do |subject|
    options[:review_subject] = subject || ""
  end
  
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    puts examples
    exit
  end 
  opts.separator "\nEXAMPLES"  
end

# The actual parsing
begin
  optparse.parse!
rescue OptionParser::InvalidOption, OptionParser::InvalidArgument, OptionParser::MissingArgument
  puts "#{$!.message}"
  puts "try 'git reviewme -h' for more information"
  exit
end

def publish_specific_commits?
  not ARGV.empty?
end

# Getting commits info
commits_to_publish = []

if publish_specific_commits?
  commit_queue = %x[git log -50 --pretty=format:'%H||%ce||%s||%ci']
  commit_queue.each_line { |commit|
    if commit.start_with?(*ARGV)
      commits_to_publish << commit
    end
  }
else
  commits_to_publish = %x[git log -#{options[:commits_number]} --pretty=format:'%H||%ce||%s||%ci'].split("\n")
end

# Preparing POST query
post_query = "review[publisher_email]=#{publisher_email}&review[publisher_name]=#{publisher_name}&review[branch]=#{current_branch}&review[subject]=#{options[:review_subject]}"

commits_to_publish.each {|commit_line|
  commit_fields = commit_line.split("||")
  post_query << "&commit[][shorthash]=#{commit_fields[0][0..6]}"
  post_query << "&commit[][email]=#{commit_fields[1]}"
  post_query << "&commit[][message]=#{commit_fields[2]}"
  post_query << "&commit[][date]=#{commit_fields[3]}"  
}

# POST to server
exec("curl -d '" << post_query << "' #{reviewme_server_url}")